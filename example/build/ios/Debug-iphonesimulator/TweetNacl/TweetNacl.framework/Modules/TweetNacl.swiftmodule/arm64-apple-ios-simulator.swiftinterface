// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name TweetNacl
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CTweetNacl
import Foundation
import Swift
@_exported import TweetNacl
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct NaclSecretBox {
  public enum NaclSecretBoxError : Swift.Error {
    case invalidParameters
    case internalError
    case creationFailed
    public static func == (a: TweetNacl.NaclSecretBox.NaclSecretBoxError, b: TweetNacl.NaclSecretBox.NaclSecretBoxError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func secretBox(message: Foundation.Data, nonce: Foundation.Data, key: Foundation.Data) throws -> Foundation.Data
  public static func open(box: Foundation.Data, nonce: Foundation.Data, key: Foundation.Data) throws -> Foundation.Data
}
public struct NaclScalarMult {
  public enum NaclScalarMultError : Swift.Error {
    case invalidParameters
    case internalError
    case creationFailed
    public static func == (a: TweetNacl.NaclScalarMult.NaclScalarMultError, b: TweetNacl.NaclScalarMult.NaclScalarMultError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func scalarMult(n: Foundation.Data, p: Foundation.Data) throws -> Foundation.Data
  public static func base(n: Foundation.Data) throws -> Foundation.Data
}
public struct NaclBox {
  public enum NaclBoxError : Swift.Error {
    case invalidParameters
    case internalError
    case creationFailed
    public static func == (a: TweetNacl.NaclBox.NaclBoxError, b: TweetNacl.NaclBox.NaclBoxError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func box(message: Foundation.Data, nonce: Foundation.Data, publicKey: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func before(publicKey: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func open(message: Foundation.Data, nonce: Foundation.Data, publicKey: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func keyPair() throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
  public static func keyPair(fromSecretKey sk: Foundation.Data) throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
}
public struct NaclSign {
  public enum NaclSignError : Swift.Error {
    case invalidParameters
    case internalError
    case creationFailed
    public static func == (a: TweetNacl.NaclSign.NaclSignError, b: TweetNacl.NaclSign.NaclSignError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func sign(message: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func signOpen(signedMessage: Foundation.Data, publicKey: Foundation.Data) throws -> Foundation.Data
  public static func signDetached(message: Foundation.Data, secretKey: Foundation.Data) throws -> Foundation.Data
  public static func signDetachedVerify(message: Foundation.Data, sig: Foundation.Data, publicKey: Foundation.Data) throws -> Swift.Bool
  public struct KeyPair {
    public static func keyPair() throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
    public static func keyPair(fromSecretKey secretKey: Foundation.Data) throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
    public static func keyPair(fromSeed seed: Foundation.Data) throws -> (publicKey: Foundation.Data, secretKey: Foundation.Data)
  }
}
extension TweetNacl.NaclSecretBox.NaclSecretBoxError : Swift.Equatable {}
extension TweetNacl.NaclSecretBox.NaclSecretBoxError : Swift.Hashable {}
extension TweetNacl.NaclScalarMult.NaclScalarMultError : Swift.Equatable {}
extension TweetNacl.NaclScalarMult.NaclScalarMultError : Swift.Hashable {}
extension TweetNacl.NaclBox.NaclBoxError : Swift.Equatable {}
extension TweetNacl.NaclBox.NaclBoxError : Swift.Hashable {}
extension TweetNacl.NaclSign.NaclSignError : Swift.Equatable {}
extension TweetNacl.NaclSign.NaclSignError : Swift.Hashable {}
